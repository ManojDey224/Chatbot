# -*- coding: utf-8 -*-
"""Untitled28.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SdChj3rO5NCIR7iA4fg6g5H5uVB_P6rg
"""

#!pip install setuptools --upgrade

#!pip install pipwin
#!pip install pyaudio

#pip install nltk
#pip install gtts
#pip install playsound==1.2.2
#pip install SpeechRecognition

import nltk
nltk.download('punkt')
nltk.download('wordnet')

import json
import nltk
import random
from nltk.stem import WordNetLemmatizer
from nltk.tokenize import word_tokenize
import speech_recognition as sr
from gtts import gTTS
import os
import playsound

# --- Load the JSON data ---
with open('sop_data.json', 'r') as file:
    sop_data = json.load(file)

# --- Text Preprocessing ---
lemmatizer = WordNetLemmatizer()
def preprocess_text(text):
    tokens = word_tokenize(text.lower())
    lemmatized_tokens = [lemmatizer.lemmatize(token) for token in tokens]
    return lemmatized_tokens

# --- Intent Matching ---
def find_matching_sop(user_input):
    processed_input = preprocess_text(user_input)
    for sop_topic in sop_data:
        topic_keywords = preprocess_text(sop_topic['topic'])
        for word in processed_input:
            if word in topic_keywords:
                return sop_topic
    return None

def find_matching_subtopic(user_input, sop_topic):
    processed_input = preprocess_text(user_input)
    for content in sop_topic['content']:
        subtopic_keywords = preprocess_text(content['subtopic'])
        for word in processed_input:
           if word in subtopic_keywords:
                return content
    return None

# --- Response Generation ---
def generate_response(user_input):
    sop_topic = find_matching_sop(user_input)

    if not sop_topic:
        return "I'm not sure how to answer that question related to this topic."

    subtopic = find_matching_subtopic(user_input, sop_topic)
    if subtopic:
        return f"{subtopic['subtopic']}:\n{subtopic['details']}"

    return "I found a topic related to your query, but not a specific sub-topic."

# --- Speech Recognition ---
def get_user_speech():
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        print("Listening...")
        try:
            audio = recognizer.listen(source, phrase_time_limit=5)
            text = recognizer.recognize_google(audio)
            print("You said:", text)
            return text
        except sr.UnknownValueError:
            print("Could not understand audio")
            return ""
        except sr.RequestError as e:
            print(f"Could not request results; {e}")
            return ""
        except Exception as e:
            print(f"An unexpected error occurred: {e}")
            return ""

# --- Text-to-Speech ---
def speak(text):
    try:
      tts = gTTS(text=text, lang='en')
      tts.save("response.mp3")
      playsound.playsound("response.mp3")
      os.remove("response.mp3")
    except Exception as e:
       print(f"Error during speech synthesis or playback: {e}")

# --- Chatbot loop ---
def chatbot():
    print("Welcome! You can either type or speak your questions about the Standard Operating Procedures.")
    while True:
        mode = input("Choose input mode (type/speak): ").lower()
        if mode == "type":
            user_input = input("You: ")
        elif mode == "speak":
            user_input = get_user_speech()
            if not user_input:
                continue # Skip if speech recog failed
        else:
            print("Invalid mode. Please choose 'type' or 'speak'.")
            continue

        if user_input.lower() in ["goodbye", "bye", "see you later", "adios", "take care"]:
            speak("Goodbye! If you have any more questions, feel free to ask.")
            print("Chatbot: Goodbye! If you have any more questions, feel free to ask.")
            break

        response = generate_response(user_input)
        print("Chatbot:", response)
        speak(response)


if __name__ == "__main__":
    chatbot()
